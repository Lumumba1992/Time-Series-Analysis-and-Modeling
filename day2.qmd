---
title: "Lab exercise: day 2"
editor: visual
---

# Apply

```{r}
library(tsibble)
library(feasts)
library(fabletools)
library(tidyverse)

vaccine_administrated_tsb <- read_rds("vaccine_administrated_tsb.rds")
vaccine_administrated_tsb
```

## Decomposition

```{r}
stl_decom <- vaccine_administrated_tsb |>
  filter(region == "H") |> 
  model(
    STL(dose_adminstrated ~ trend(window = 12) +
                   season(window = "periodic"))) |>
  components()
  stl_decom |> 
  autoplot()
```

Complete the code below for the components produced by STL:

```{r}
stl_decom |> 
  autoplot()
```

Describe the result of the decomposition from the above plot.

```{r}
stl_decom |>
  ggplot(aes(x = month)) +
  geom_line(aes(y = dose_adminstrated, colour = "Data")) +
  geom_line(aes(y = season_adjust,
                colour = "Seasonally Adjusted")) +
  geom_line(aes(y = trend, colour = "Trend")) +
  labs(y = "Month",
       title = "Vaccine dose adminstrated") +
  scale_colour_manual(
    values = c("gray", "#0072B2", "#D55E00"),
    breaks = c("Data", "Seasonally Adjusted", "Trend")
  )
```

## Computing features

You can start by calculating some simple features including average (`mean`) and standard deviation (`sd`). You also need to know how to calculate the coefficient of variation. Complete the following code to do that:

```{r}
vaccine_administrated_tsb |>
  features(dose_adminstrated, list(average = mean, standard_deviation = sd)) |> mutate( coefficient_of_variation = standard_deviation/average)
```

You can also use *feasts* package to include about 48 different features providing various numerical summaries of time series. Complete the following code to compute those features for the monthly vaccine dose adminstrated:

```{r}
vaccine_administrated_features <- vaccine_administrated_tsb |>
  features(dose_adminstrated,feature_set(pkgs = "feasts"))
vaccine_administrated_features
```

> The dataset of administered vaccine doses currently comprises only nine time series. Nevertheless, there are cases where datasets may includes hundreds or even thousands of time series. The method applied here can be replicated with datasets of varying sizes, including those with thousands of time series.

## Visualizing features

Create a scatterplot to show the strength of trend and seasonality features:

```{r}
ggplot(data = vaccine_administrated_features, 
       mapping = aes(x = trend_strength, y = seasonal_strength_year)) +
  geom_point()
```

Using a feature indicating the level of forecast difficulty or ease for a given time series, generate a histogram to visualize the distribution of forecastability within the dataset.

```{r}
ggplot(data = vaccine_administrated_features, 
       mapping = aes(spectral_entropy)) +
  geom_density(fill="lightblue")
```

> This distribution would make more sense when you deal with a dataset containing hundreds or thousands of time series.
